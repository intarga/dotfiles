# the lazy way to send commands
map global normal <semicolon> :

# buffer management
map global normal q :db<ret>
map global normal <tab> :bn<ret>
map global normal <s-tab> :bp<ret>

# select to line start/end
map global normal h <a-h>
map global normal l <a-l>

# match bindings
declare-user-mode match
map global normal m ':enter-user-mode match<ret>' 
map global match i <a-i> -docstring 'inside'
map global match a <a-a> -docstring 'around'
declare-user-mode match-surround
map global match s ':enter-user-mode match-surround<ret>' -docstring 'surround'
map global match-surround b 'i(<esc>a)<esc>' -docstring 'parentheses'
map global match-surround r 'i[<esc>a]<esc>' -docstring 'square brackets'
map global match-surround B 'i{<esc>a}<esc>' -docstring 'braces'
map global match-surround a 'i<lt><esc>a<gt><esc>' -docstring 'angle brackets'
map global match-surround <quote> 'i<quote><esc>a<quote><esc>' -docstring 'single quotes'
map global match-surround <dquote> 'i<dquote><esc>a<dquote><esc>' -docstring 'double quotes'
map global match n m -docstring 'go to next matching pair'
map global match N m -docstring 'extend to next matching pair'
map global match p m -docstring 'go to prev matching pair'
map global match P m -docstring 'extend to prev matching pair'

# use tab to navigate completions without breaking other tab usage
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        #
        # this is necessary to avoid breaking completions that start before
        # you've actually typed anything
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

# soft wrap
addhl global/ wrap -marker '↪ '

# tree-sitter (requires installing kak-tree-sitter and ktsctl binaries)
# once you have the binaries installed, you also need to load grammars
# with `ktsctl sync <language>`
eval %sh{ kak-tree-sitter -dks --init $kak_session }

colorscheme tatami

# hooks to change faces based on whether insert mode is active
# regexp captures last part of hook param, which represents the new mode
hook global ModeChange .*:.*:(.*) %{
    # record mode name for use in modeline
    set-option window current_mode %val{hook_param_capture_1}
}
hook global ModeChange .*:.*:insert %{
    # set cursor to underline in insert mode
    set-face window PrimaryCursor PrimaryCursorIns
    set-face window PrimaryCursorEol PrimaryCursorEolIns
    set-face window StatusLineMode StatusLineModeIns
    set-face window StatusLineInfo StatusLineInfoIns
}
hook global ModeChange .*:.*:(?!insert).* %{
    set-face window PrimaryCursor PrimaryCursorNor
    set-face window PrimaryCursorEol PrimaryCursorEolNor
    set-face window StatusLineMode StatusLineModeNor
    set-face window StatusLineInfo StatusLineInfoNor
}

# LSP (requires installing kakoune-lsp binary)
eval %sh{kak-lsp}
lsp-enable

# LSP match mappings
map global object a '<a-semicolon>lsp-object<ret>' -docstring 'LSP any symbol'
map global object f '<a-semicolon>lsp-object Function Method<ret>' -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>' -docstring 'LSP class interface or struct'

# other LSP mappings
map global user k ':lsp-hover-buffer<ret>'
map global user e ':lsp-diagnostics<ret>'

# LSP curly underline diagnostics
set-face global DiagnosticError default,default,red+c
set-face global DiagnosticWarning default,default,yellow+c
set-face global DiagnosticHint default,default,yellow+c

# LSP disable diagnostic flags in gutter
lsp-diagnostic-lines-disable global

# remove lsp code action indicator in modeline
set-option global lsp_auto_show_code_actions false

# override lsp modeline progress to show message, and change icon to a symbol not emoji
define-command -hidden -override lsp-handle-progress -params 6 -docstring %{
  lsp-handle-progress <token> <title> <cancelable> <message> <percentage> <done>
  Handle progress messages sent from the language server. Override to handle this.
} %{
    set-option global lsp_modeline_progress %sh{
        if ! "$6"; then
            #echo ""$kak_opt_lsp_progress_indicator""
            # More verbose alternative that shows what the server is working on.  Dont show this in
            # the modeline by default because the modeline is part of the terminal title; changing
            # that too quickly can be noisy.
            echo "$2${5:+" ($5%)"}${4:+": $4"} ⏳"
        fi
    }
}

# modeline - needs to be down here otherwise kak-lsp will tamper with it :(
declare-option str current_mode 'normal'
set global modelinefmt '{StatusLineValue}%opt{lsp_modeline_progress}{StatusLine} %val{bufname} %val{cursor_line}:%val{cursor_char_column} /%val{buf_line_count} {{context_info}}{StatusLineInfo} %val{selection_count} {StatusLineMode} %opt{current_mode} '

# disable mirroring of modeline to terminal title
set-option -add global ui_options terminal_set_title=false

define-command find -docstring "fuzzy-find files" -params 1 %{ edit %arg{1} }
complete-command find shell-script-candidates %{ find . -type f }
map global user f :find<space> -docstring 'fuzzy-find files'
